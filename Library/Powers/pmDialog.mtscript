<!-- Veggiesama's pmDialog macro, MapTool B74 -->
<!-- Creates the power input dialog as a string, then returns it to be evaluated. -->
<!-- All of the encoding/decoding is required because strings get mangled when concatenated. -->
<!-- NOTE: The q is a single quote -->

[H: part0 = encode('input(
  "tab0 | Starting rows || TAB",
  "help | <html><b>Each PowerName must be unique, or you will override a previously saved power!</b></html> | | LABEL | SPAN=TRUE",
  "PowerName | " + json.get(LastPower, "PowerName") + " | Power"+q+"s name | TEXT | WIDTH="+S_WIDTH,
  "ActionType| " + ACTION_TYPES + " | Action type  | LIST | SELECT=" + json.get(LastPower, "ActionType"),
  "PowerNum  | " + POWER_TYPES  + " | Usage type | LIST | SELECT=" + json.get(LastPower, "PowerNum"),
  "help | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- | | LABEL | SPAN=TRUE",
  "Chk_Keywords | " + json.get(LastPower, "Chk_Keywords") + " | Use Keywords?  | CHECK",
  "Keywords     | " + json.get(LastPower, "Keywords") + " | Keywords | TEXT | WIDTH="+M_WIDTH,
  "help | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- | | LABEL | SPAN=TRUE",
  "Chk_Range | " + json.get(LastPower, "Chk_Range") + " | Use Range?  | CHECK",
  "AttackType| " + ATTACK_TYPES + " | Range type | LIST | SELECT=" + json.get(LastPower, "AttackType"),
  "Range     | " + json.get(LastPower, "Range") + " | Range | TEXT | WIDTH="+S_WIDTH,
  "help | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- | | LABEL | SPAN=TRUE",
  "Chk_FlavorText| " + json.get(LastPower, "Chk_FlavorText") + " | Use Flavor text?  | CHECK",
  "FlavorText    | " + json.get(LastPower, "FlavorText") + " | Flavor text | TEXT | WIDTH="+L_WIDTH,
  "help | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- | | LABEL | SPAN=TRUE",
  "Chk_Requirement | " + json.get(LastPower, "Chk_Requirement") + " | Use Requirement?  | CHECK",
  "Requirement     | " + json.get(LastPower, "Requirement") + " | Requirement | TEXT | WIDTH="+M_WIDTH,
  "help | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- | | LABEL | SPAN=TRUE",
  "Chk_Trigger| " + json.get(LastPower, "Chk_Trigger") + " | Use Trigger?  | CHECK",
  "Trigger    | " + json.get(LastPower, "Trigger") + " | Trigger | TEXT | WIDTH="+L_WIDTH,
')]

[H: part1 = encode('
  "tab1 | Primary || TAB",
  "Chk_Target| " + json.get(json.get(LastPower,"PrimaryAttack"), "Chk_Target") + " | Use primary target? | CHECK",
  "Target    | " + json.get(json.get(LastPower,"PrimaryAttack"), "Target") + " | Target(s) | TEXT | WIDTH="+M_WIDTH,
  "help | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- | | LABEL | SPAN=TRUE",
  "Chk_Attack| " + json.get(json.get(LastPower,"PrimaryAttack"), "Chk_Attack") + " | Use primary attack? | CHECK",
  "Equip | " + WEAPON_SLOTS + " | Equip | LIST | SELECT=" + json.get(json.get(LastPower,"PrimaryAttack"), "Equip"),
  "AttackRoll | " + ATTACK_ROLLS + " | Attack roll | LIST | SELECT=" + json.get(json.get(LastPower,"PrimaryAttack"), "AttackRoll"),
  "AttackAbility | " + ABILITY_BONUS_NAMES + " | Attack ability | LIST | SELECT=" + json.get(json.get(LastPower,"PrimaryAttack"), "AttackAbility"),
  "AttackBonus | " + json.get(json.get(LastPower,"PrimaryAttack"), "AttackBonus") + " | Attack bonus | TEXT | WIDTH="+S_WIDTH,
  "VsDefense | " + DEFENSE_NAMES + " | Versus defense | LIST | SELECT=" + json.get(json.get(LastPower,"PrimaryAttack"), "VsDefense"),
  "Repetitions | " + REPETITIONS + " | Default repetitions | LIST | SELECT=" + json.get(json.get(LastPower,"PrimaryAttack"), "Repetitions"),
  "CritThreshold   | " + json.get(json.get(LastPower,"PrimaryAttack"), "CritThreshold") + "   | Critical hit threshold | TEXT | WIDTH="+S_WIDTH,
  "Chk_IgnoreProf  | " + json.get(json.get(LastPower,"PrimaryAttack"), "Chk_IgnoreProf") + "  | Ignore proficiency bonus? | CHECK",
  "Chk_IgnoreFeat  | " + json.get(json.get(LastPower,"PrimaryAttack"), "Chk_IgnoreFeat") + "  | Ignore feat bonus? | CHECK",
  "Chk_IgnoreLevel | " + json.get(json.get(LastPower,"PrimaryAttack"), "Chk_IgnoreLevel") + " | Ignore level bonus?   | CHECK",
  "Chk_IgnoreCond | " + json.get(json.get(LastPower,"PrimaryAttack"), "Chk_IgnoreCond") + " | Ignore conditional bonuses?   | CHECK",
  "help | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- | | LABEL | SPAN=TRUE",
  "Chk_IgnoreDamage| " + json.get(json.get(LastPower,"PrimaryAttack"), "Chk_IgnoreDamage") + " | Ignore damage? | CHECK",
  "DmgAbility | " + ABILITY_BONUS_NAMES + " | Damage ability | LIST | SELECT=" + json.get(json.get(LastPower,"PrimaryAttack"), "DmgAbility"),
  "DmgDice | " + DAMAGE_DICE + " | Damage dice | LIST | SELECT=" + json.get(json.get(LastPower,"PrimaryAttack"), "DmgDice"),
  "DmgRoll | " + DAMAGE_ROLL + " | Damage roll | LIST | SELECT=" + json.get(json.get(LastPower,"PrimaryAttack"), "DmgRoll"),
  "DmgBonus | " + json.get(json.get(LastPower,"PrimaryAttack"), "DmgBonus") + " | Damage bonus | TEXT | WIDTH="+S_WIDTH,
  "DmgBonusMax | " + json.get(json.get(LastPower,"PrimaryAttack"), "DmgBonusMax") + " | As above, maximized | TEXT | WIDTH="+S_WIDTH,
  "ReRoll | " + DAMAGE_REROLLS + " | Damage roll (reroll) | LIST | SELECT=" + json.get(json.get(LastPower,"PrimaryAttack"), "ReRoll"),
  "DmgType     | " + json.get(json.get(LastPower,"PrimaryAttack"), "DmgType") + " | Damage type | TEXT | WIDTH="+S_WIDTH,
  "Chk_MultiDmgRolls | " + json.get(json.get(LastPower,"PrimaryAttack"), "Chk_MultiDmgRolls") + " | Multiple dmg rolls (non-AOE)? | CHECK",
  "Chk_IgnoreMisc | " + json.get(json.get(LastPower,"PrimaryAttack"), "Chk_IgnoreMisc") + " | Ignore misc bonuses?   | CHECK",
  "Chk_IgnoreEnh | " + json.get(json.get(LastPower,"PrimaryAttack"), "Chk_IgnoreEnh") + " | Ignore enh. bonuses?   | CHECK",
  "Chk_IgnoreCondDmg | " + json.get(json.get(LastPower,"PrimaryAttack"), "Chk_IgnoreCondDmg") + " | Ignore conditional bonuses?   | CHECK",
  "help | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- | | LABEL | SPAN=TRUE",
  "AttackAppend    | " + json.get(json.get(LastPower,"PrimaryAttack"), "AttackAppend") + " | Append text to Attack row | TEXT | WIDTH="+M_WIDTH,
  "HitAppend   | " + json.get(json.get(LastPower,"PrimaryAttack"), "HitAppend") + " | Append text to Hit row | TEXT | WIDTH="+L_WIDTH,
  "help | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- | | LABEL | SPAN=TRUE",
  "Chk_Miss  | " + json.get(json.get(LastPower,"PrimaryAttack"), "Chk_Miss") + " | Use Miss? | CHECK",
  "Miss      | " + json.get(json.get(LastPower,"PrimaryAttack"), "Miss") + " | Miss description | TEXT | WIDTH="+L_WIDTH,
  "help | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- | | LABEL | SPAN=TRUE",
  "Chk_PriEffect| " + json.get(LastPower, "Chk_PriEffect") + " | Use Effect? | CHECK",
  "PriEffect    | " + json.get(LastPower, "PriEffect") + " | Effect | TEXT | WIDTH="+L_WIDTH,
')]

[H: part2 = encode('
  "tab2 | Secondary || TAB",
  "Chk_SecTarget| " + json.get(json.get(LastPower,"SecondaryAttack"), "Chk_Target") + " | Use secondary target? | CHECK",
  "SecTarget    | " + json.get(json.get(LastPower,"SecondaryAttack"), "Target") + " | Target(s) | TEXT | WIDTH="+M_WIDTH,
  "help | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- | | LABEL | SPAN=TRUE",
  "Chk_SecAttack| " + json.get(json.get(LastPower,"SecondaryAttack"), "Chk_Attack") + " | Use secondary attack? | CHECK",
  "SecEquip | " + WEAPON_SLOTS + " | Equip | LIST | SELECT=" + json.get(json.get(LastPower,"SecondaryAttack"), "Equip"),
  "SecAttackRoll | " + ATTACK_ROLLS + " | Attack roll | LIST | SELECT=" + json.get(json.get(LastPower,"SecondaryAttack"), "AttackRoll"),
  "SecAttackAbility | " + ABILITY_BONUS_NAMES + " | Attack ability | LIST | SELECT=" + json.get(json.get(LastPower,"SecondaryAttack"), "AttackAbility"),
  "SecAttackBonus | " + json.get(json.get(LastPower,"SecondaryAttack"), "AttackBonus") + " | Attack bonus | TEXT | WIDTH="+S_WIDTH,
  "SecVsDefense | " + DEFENSE_NAMES + " | Versus defense | LIST | SELECT=" + json.get(json.get(LastPower,"SecondaryAttack"), "VsDefense"),
  "SecRepetitions | " + REPETITIONS + " | Default repetitions | LIST | SELECT=" + json.get(json.get(LastPower,"SecondaryAttack"), "Repetitions"),
  "SecCritThreshold   | " + json.get(json.get(LastPower,"SecondaryAttack"), "CritThreshold") + " | Critical hit threshold | TEXT | WIDTH="+S_WIDTH,
  "Chk_SecIgnoreProf  | " + json.get(json.get(LastPower,"SecondaryAttack"), "Chk_IgnoreProf") + "   | Ignore proficiency bonus? | CHECK",
  "Chk_SecIgnoreFeat  | " + json.get(json.get(LastPower,"SecondaryAttack"), "Chk_IgnoreFeat") + "  | Ignore feat bonus? | CHECK",
  "Chk_SecIgnoreLevel | " + json.get(json.get(LastPower,"SecondaryAttack"), "Chk_IgnoreLevel") + "  | Ignore level bonus?   | CHECK",
  "Chk_SecIgnoreCond | " + json.get(json.get(LastPower,"SecondaryAttack"), "Chk_IgnoreCond") + " | Ignore conditional bonuses?   | CHECK",
  "help | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- | | LABEL | SPAN=TRUE",
  "Chk_SecIgnoreDamage| " + json.get(json.get(LastPower,"SecondaryAttack"), "Chk_IgnoreDamage") + " | Ignore damage? | CHECK",
  "SecDmgAbility | " + ABILITY_BONUS_NAMES + " | Damage ability | LIST | SELECT=" + json.get(json.get(LastPower,"SecondaryAttack"), "DmgAbility"),
  "SecDmgDice | " + DAMAGE_DICE + " | Damage dice | LIST | SELECT=" + json.get(json.get(LastPower,"SecondaryAttack"), "DmgDice"),
  "SecDmgRoll | " + DAMAGE_ROLL + " | Damage roll | LIST | SELECT=" + json.get(json.get(LastPower,"SecondaryAttack"), "DmgRoll"),
  "SecDmgBonus | " + json.get(json.get(LastPower,"SecondaryAttack"), "DmgBonus") + " | Damage bonus | TEXT | WIDTH="+S_WIDTH,
  "SecDmgBonusMax | " + json.get(json.get(LastPower,"SecondaryAttack"), "DmgBonusMax") + " | As above, maximized | TEXT | WIDTH="+S_WIDTH,
  "SecReRoll | " + DAMAGE_REROLLS + " | Damage roll (reroll) | LIST | SELECT=" + json.get(json.get(LastPower,"SecondaryAttack"), "ReRoll"),
  "SecDmgType     | " + json.get(json.get(LastPower,"SecondaryAttack"), "DmgType") + " | Damage type | TEXT | WIDTH="+S_WIDTH,
  "Chk_SecMultiDmgRolls | " + json.get(json.get(LastPower,"SecondaryAttack"), "Chk_MultiDmgRolls") + " | Multiple dmg rolls (non-AOE)? | CHECK",
  "Chk_SecIgnoreMisc | " + json.get(json.get(LastPower,"SecondaryAttack"), "Chk_IgnoreMisc") + " | Ignore misc bonuses?   | CHECK",
  "Chk_SecIgnoreEnh | " + json.get(json.get(LastPower,"SecondaryAttack"), "Chk_IgnoreEnh") + " | Ignore enh. bonuses?   | CHECK",
  "Chk_SecIgnoreCondDmg | " + json.get(json.get(LastPower,"SecondaryAttack"), "Chk_IgnoreCondDmg") + " | Ignore conditional bonuses?   | CHECK",
  "help | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- | | LABEL | SPAN=TRUE",
  "SecAttackAppend    | " + json.get(json.get(LastPower,"SecondaryAttack"), "AttackAppend") + " | Append text to Attack row | TEXT | WIDTH="+M_WIDTH,
  "SecHitAppend   | " + json.get(json.get(LastPower,"SecondaryAttack"), "HitAppend") + " | Append text to Hit row | TEXT | WIDTH="+L_WIDTH,
  "help | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- | | LABEL | SPAN=TRUE",
  "Chk_SecMiss  | " + json.get(json.get(LastPower,"SecondaryAttack"), "Chk_Miss") + " | Use Miss? | CHECK",
  "SecMiss      | " + json.get(json.get(LastPower,"SecondaryAttack"), "Miss") + " | Miss description | TEXT | WIDTH="+L_WIDTH,
  "help | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- | | LABEL | SPAN=TRUE",
  "Chk_SecEffect| " + json.get(LastPower, "Chk_SecEffect") + " | Use Effect? | CHECK",
  "SecEffect    | " + json.get(LastPower, "SecEffect") + " | Effect | TEXT | WIDTH="+L_WIDTH,
')]

[H: part3 = encode('
  "tab3 | Tertiary || TAB",
  "Chk_TertTarget| " + json.get(json.get(LastPower,"TertiaryAttack"), "Chk_Target") + " | Use tertiary target? | CHECK",
  "TertTarget    | " + json.get(json.get(LastPower,"TertiaryAttack"), "Target") + " | Target(s) | TEXT | WIDTH="+M_WIDTH,
  "help | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- | | LABEL | SPAN=TRUE",
  "Chk_TertAttack| " + json.get(json.get(LastPower,"TertiaryAttack"), "Chk_Attack") + " | Use tertiary attack? | CHECK",
  "TertEquip | " + WEAPON_SLOTS + " | Equip | LIST | SELECT=" + json.get(json.get(LastPower,"TertiaryAttack"), "Equip"),
  "TertAttackRoll | " + ATTACK_ROLLS + " | Attack roll | LIST | SELECT=" + json.get(json.get(LastPower,"TertiaryAttack"), "AttackRoll"),
  "TertAttackAbility | " + ABILITY_BONUS_NAMES + " | Attack ability | LIST | SELECT=" + json.get(json.get(LastPower,"TertiaryAttack"), "AttackAbility"),
  "TertAttackBonus | " + json.get(json.get(LastPower,"TertiaryAttack"), "AttackBonus") + " | Attack bonus | TEXT | WIDTH="+S_WIDTH,
  "TertVsDefense | " + DEFENSE_NAMES + " | Versus defense | LIST | SELECT=" + json.get(json.get(LastPower,"TertiaryAttack"), "VsDefense"),
  "TertRepetitions | " + REPETITIONS + " | Default repetitions | LIST | SELECT=" + json.get(json.get(LastPower,"TertiaryAttack"), "Repetitions"),
  "TertCritThreshold   | " + json.get(json.get(LastPower,"TertiaryAttack"), "CritThreshold") + " | Critical hit threshold | TEXT | WIDTH="+S_WIDTH,
  "Chk_TertIgnoreProf  | " + json.get(json.get(LastPower,"TertiaryAttack"), "Chk_IgnoreProf") + "    | Ignore proficiency bonus? | CHECK",
  "Chk_TertIgnoreFeat  | " + json.get(json.get(LastPower,"TertiaryAttack"), "Chk_IgnoreFeat") + "  | Ignore feat bonus? | CHECK",
  "Chk_TertIgnoreLevel | " + json.get(json.get(LastPower,"TertiaryAttack"), "Chk_IgnoreLevel") + "   | Ignore level bonus?   | CHECK",
  "Chk_TertIgnoreCond | " + json.get(json.get(LastPower,"TertiaryAttack"), "Chk_IgnoreCond") + " | Ignore conditional bonuses?   | CHECK",
  "help | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- | | LABEL | SPAN=TRUE",
  "Chk_TertIgnoreDamage| " + json.get(json.get(LastPower,"TertiaryAttack"), "Chk_IgnoreDamage") + " | Ignore damage? | CHECK",
  "TertDmgAbility | " + ABILITY_BONUS_NAMES + " | Damage ability | LIST | SELECT=" + json.get(json.get(LastPower,"TertiaryAttack"), "DmgAbility"),
  "TertDmgDice | " + DAMAGE_DICE + " | Damage dice | LIST | SELECT=" + json.get(json.get(LastPower,"TertiaryAttack"), "DmgDice"),
  "TertDmgRoll | " + DAMAGE_ROLL + " | Damage roll | LIST | SELECT=" + json.get(json.get(LastPower,"TertiaryAttack"), "DmgRoll"),
  "TertDmgBonus | " + json.get(json.get(LastPower,"TertiaryAttack"), "DmgBonus") + " | Damage bonus | TEXT | WIDTH="+S_WIDTH,
  "TertDmgBonusMax | " + json.get(json.get(LastPower,"TertiaryAttack"), "DmgBonusMax") + " | As above, maximized | TEXT | WIDTH="+S_WIDTH,
  "TertReRoll | " + DAMAGE_REROLLS + " | Damage roll (reroll) | LIST | SELECT=" + json.get(json.get(LastPower,"TertiaryAttack"), "ReRoll"),
  "TertDmgType     | " + json.get(json.get(LastPower,"TertiaryAttack"), "DmgType") + " | Damage type | TEXT | WIDTH="+S_WIDTH,
  "Chk_TertMultiDmgRolls | " + json.get(json.get(LastPower,"TertiaryAttack"), "Chk_MultiDmgRolls") + " | Multiple dmg rolls (non-AOE)? | CHECK",
  "Chk_TertIgnoreMisc | " + json.get(json.get(LastPower,"TertiaryAttack"), "Chk_IgnoreMisc") + " | Ignore misc bonuses?   | CHECK",
  "Chk_TertIgnoreEnh | " + json.get(json.get(LastPower,"TertiaryAttack"), "Chk_IgnoreEnh") + " | Ignore enh. bonuses?   | CHECK",
  "Chk_TertIgnoreCondDmg | " + json.get(json.get(LastPower,"TertiaryAttack"), "Chk_IgnoreCondDmg") + " | Ignore conditional bonuses?   | CHECK",
  "help | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- | | LABEL | SPAN=TRUE",
  "TertAttackAppend    | " + json.get(json.get(LastPower,"TertiaryAttack"), "AttackAppend") + " | Append text to Attack row | TEXT | WIDTH="+M_WIDTH,
  "TertHitAppend   | " + json.get(json.get(LastPower,"TertiaryAttack"), "HitAppend") + " | Append text to Hit row | TEXT | WIDTH="+L_WIDTH,
  "help | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- | | LABEL | SPAN=TRUE",
  "Chk_TertMiss  | " + json.get(json.get(LastPower,"TertiaryAttack"), "Chk_Miss") + " | Use Miss? | CHECK",
  "TertMiss      | " + json.get(json.get(LastPower,"TertiaryAttack"), "Miss") + " | Miss description | TEXT | WIDTH="+L_WIDTH,
  "help | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- | | LABEL | SPAN=TRUE",
  "Chk_TertEffect| " + json.get(LastPower, "Chk_TertEffect") + " | Use Effect? | CHECK",
  "TertEffect    | " + json.get(LastPower, "TertEffect") + " | Effect | TEXT | WIDTH="+L_WIDTH,
')]

[H: part4 = encode('
  "tab4 | Ending rows || TAB",
  "Chk_Effect| " + json.get(LastPower, "Chk_Effect") + " | Use Effect? | CHECK",
  "Effect    | " + json.get(LastPower, "Effect") + " | Effect | TEXT | WIDTH="+L_WIDTH,
  "help | <html><b>Tip:</b> To use Aftereffect (or Failed Saving Throw, etc.), type <b>&lt;BR>&lt;B>Aftereffect:&lt;/B> (description)</b> in the above Effect box.</html> | | LABEL | SPAN=TRUE",
  "help | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- | | LABEL | SPAN=TRUE",
  "Chk_PreEffect| " + json.get(LastPower, "Chk_PreEffect") + " | Use Prepended Effect? | CHECK",
  "PreEffect    | " + json.get(LastPower, "PreEffect") + " | Effect | TEXT | WIDTH="+L_WIDTH,
  "help | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- | | LABEL | SPAN=TRUE",
  "Chk_Sustain       | " + json.get(LastPower, "Chk_Sustain") + " | Use Sustain? | CHECK",
  "SustainActionType | " + SUSTAIN_ACTION_TYPES + " | Sustain action type | LIST | SELECT=" + json.get(LastPower, "SustainActionType"),
  "SustainDesc       | " + json.get(LastPower, "SustainDesc") + " | Sustain description | TEXT | WIDTH="+L_WIDTH,
  "help | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- | | LABEL | SPAN=TRUE",
  "Chk_Special| " + json.get(LastPower, "Chk_Special") + " | Use Special? | CHECK",
  "Special    | " + json.get(LastPower, "Special") + " | Special | TEXT | WIDTH="+L_WIDTH,
  "help | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- | | LABEL | SPAN=TRUE",
  "help | <html><b>Augment:</b> Subtract this many psionic power points when you execute this power (see note at bottom).</html> | | LABEL | SPAN=TRUE",
  "Chk_Augment| " + json.get(LastPower, "Chk_Augment") + " | Use Augment? | CHECK",
  "Augment    | " + json.get(LastPower, "Augment") + " | Augment | TEXT | WIDTH="+S_WIDTH,
  "help | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- | | LABEL | SPAN=TRUE",
  "help | <html>Use custom rows for class build info (like Artful Dodger or Star Pact), Runepriest runes, or miscellaneous information.</html> | | LABEL | SPAN=TRUE",
  "Chk_Custom  | " + json.get(LastPower, "Chk_Custom") + " | Use Custom Row? | CHECK",
  "CustomLabel | " + json.get(LastPower, "CustomLabel") + " | Custom row label | TEXT | WIDTH="+S_WIDTH,
  "Custom      | " + json.get(LastPower, "Custom") + " | Custom row text | TEXT | WIDTH="+L_WIDTH,
  "help | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- | | LABEL | SPAN=TRUE",
  "Chk_Custom2 | " + json.get(LastPower, "Chk_Custom2") + " | Use Custom Row #2? | CHECK",
  "CustomLabel2| " + json.get(LastPower, "CustomLabel2") + " | Custom row label #2 | TEXT | WIDTH="+S_WIDTH,
  "Custom2     | " + json.get(LastPower, "Custom2") + " | Custom row text #2 | TEXT | WIDTH="+L_WIDTH,
  "help | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- | | LABEL | SPAN=TRUE",
  "Chk_Custom3 | " + json.get(LastPower, "Chk_Custom3") + " | Use Custom Row #3? | CHECK",
  "CustomLabel3| " + json.get(LastPower, "CustomLabel3") + " | Custom row label #3 | TEXT | WIDTH="+S_WIDTH,
  "Custom3     | " + json.get(LastPower, "Custom3") + " | Custom row text #3 | TEXT | WIDTH="+L_WIDTH,
  "help | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- | | LABEL | SPAN=TRUE",
  "help | <html><b>Notes for psionic power source:</b> For each possible use of augmentable or full discipline powers, create a new power macro.<br><b>Monks:</b> Dancing Cobra (Attack) and Dancing Cobra (Move). <b>Psions:</b> Force Punch, Force Punch (Augment 1), etc.</html> | | LABEL | SPAN=TRUE",
')]

[H: part5 = encode('
  "tab5 | Execution || TAB",
  "help | <html><b>The following options change how powers are displayed when executed.</b></html> | | LABEL | SPAN=TRUE",
  "help | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- | | LABEL | SPAN=TRUE",
  "help | <html><b>Short description</b>: A short summary can be shown next to the power name header.</html> | | LABEL | SPAN=TRUE",
  "Chk_ShortDescription | " + json.get(LastPower, "Chk_ShortDescription") + " | Use short description? | CHECK",
  "ShortDescription     | " + json.get(LastPower, "ShortDescription") + " | Short description | TEXT | WIDTH="+L_WIDTH,
  "help | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- | | LABEL | SPAN=TRUE",
  "help | <html>Check to show specific row entries in the chat window.</html> | | LABEL | SPAN=TRUE",
  "Chk_DisplayFlavorText| " + json.get(LastPower, "Chk_DisplayFlavorText") + " | Display flavor text? | CHECK",
  "Chk_DisplayTrigger   | " + json.get(LastPower, "Chk_DisplayTrigger") + "    | Display trigger? | CHECK",
  "Chk_DisplayHits      | " + json.get(LastPower, "Chk_DisplayHits") + "       | Display attack hit entries? | CHECK",
  "Chk_DisplayMisses    | " + json.get(LastPower, "Chk_DisplayMisses") + "     | Display attack miss entries? | CHECK",
  "Chk_DisplayEffect    | " + json.get(LastPower, "Chk_DisplayEffect") + "     | Display effect? | CHECK",
  "Chk_DisplaySustain   | " + json.get(LastPower, "Chk_DisplaySustain") + "    | Display sustain? | CHECK",
  "Chk_DisplaySpecial   | " + json.get(LastPower, "Chk_DisplaySpecial") + "    | Display special? | CHECK",
  "Chk_DisplayCustomRows| " + json.get(LastPower, "Chk_DisplayCustomRows") + " | Display custom rows? | CHECK",  
  "help | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- | | LABEL | SPAN=TRUE",
  "help | <html><b>Supplement</b>: A power generally layered on top of other powers, like a fighter"+q+"s mark, sneak attack, or curse damage.<br>Make a power supplemental if you intend to pair it with other powers most of the time.</html> | | LABEL | SPAN=TRUE",
  "Chk_Supplement | " + json.get(LastPower, "Chk_Supplement") + " | Is Supplemental? | CHECK",
  "help | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- | | LABEL | SPAN=TRUE",
  "help | <html><b>Associated states</b>: Posts a macrolink in the chat to automatically toggle chosen states on selected targets.<br>Use this to cover your character, allies, and enemies with informative icons, like fighter marks and cleric buffs.</html> | | LABEL | SPAN=TRUE",
  "AssState1 | " + TOKEN_STATES + " | Associated State #1 | LIST | VALUE=STRING SELECT=" + listFind(TOKEN_STATES, json.get(LastPower, "AssState1")),
  "AssState2 | " + TOKEN_STATES + " | Associated State #2 | LIST | VALUE=STRING SELECT=" + listFind(TOKEN_STATES, json.get(LastPower, "AssState2")),
  "AssState3 | " + TOKEN_STATES + " | Associated State #3 | LIST | VALUE=STRING SELECT=" + listFind(TOKEN_STATES, json.get(LastPower, "AssState3")),
  "AssState4 | " + TOKEN_STATES + " | Associated State #4 | LIST | VALUE=STRING SELECT=" + listFind(TOKEN_STATES, json.get(LastPower, "AssState4")),
  "AssState5 | " + TOKEN_STATES + " | Associated State #5 | LIST | VALUE=STRING SELECT=" + listFind(TOKEN_STATES, json.get(LastPower, "AssState5")),
')]

[H: part6 = encode('
  "tab6 | Custom code || TAB",
  "help | <html><b>Custom Code</b>: Use custom code for rolls and variables that don"+q+"t fit neatly into attack or hit code, like bonus damage or healing.<br>A target token can be selected when using Selection-based targeting, and that token can be modified through Custom Code.</html> | | LABEL | SPAN=TRUE",
  "help | <html><b>EXAMPLE</b>: Target gains [ChaBonus] temporary hit points.<br><b>EXAMPLE</b>: Alternate attack roll is [1d20].<br><b>EXAMPLE</b>: Bonus damage: [Misc1 + StrBonus]</html> | | LABEL | SPAN=TRUE",
  "Chk_CustomCode          | " + json.get(LastPower, "Chk_CustomCode") + " | Use Custom Code? | CHECK",
  "CustomCode     | " + json.get(LastPower, "CustomCode") + " | Custom code | TEXT | WIDTH="+L_WIDTH,
  "Chk_CustomCodeHasTarget | " + json.get(LastPower, "Chk_CustomCodeHasTarget") + " | Has Target? | CHECK",
  "help | <html><b>IMPORTANT NOTE</b>: Do NOT use double-quotes in the Custom Code, or the macro will not work. Single-quotes only.</html> | | LABEL | SPAN=TRUE",
  "help | <html><pre><b><u>Variable names</b></u><br>[Level], [LevelBonus], [StrBonus], [ConBonus], [DexBonus], [IntBonus], [WisBonus], [ChaBonus]<br>[Speed], [MaxHP], [CurrentHP], [TempHP], [MaxSurges], [CurrentSurges], [SurgeValue], [APs], [DailyItems]<br>[Misc1], [Misc2], ... [Misc9], [getStrProp(AbilityScores, "+q+"Wisdom"+q+")], [getRawProperty("+q+"Misc1"+q+")], etc.</pre></html>  | | LABEL | SPAN=TRUE",
  "help | <html><pre><b><u>Custom Code functions</u></b><br><b>changeHP(hpChange, surgeLoss, tempHPGain, isTempHPStackable)</b><br> EXAMPLE: Heal 15 HP and remove one healing surge: [R: changeHP(15, 1, 0, 0)]<br> EXAMPLE: Suffer 25 damage: [R: changeHP(-25, 0, 0, 0)]<br> EXAMPLE: Add +4 temp HP: [R: changeHP(0, 0, 4, 0)]<br><b>usePetPower(petName, petPowerName)</b><br> EXAMPLE: [R: usePetPower("+q+"Scruffy"+q+", "+q+"Basic Attack (Melee)"+q+")]<br><b>refreshPower(powerName)</b><br> EXAMPLE: Spending an action point to refresh a power: [R: refreshPower("+q+"Bling-bling Blaster"+q+")]<br><b>refreshMiscVar(miscVarNumber)</b><br> EXAMPLE: Restoring my Lay on Hands usages, which is stored on the Misc9 property: [R: refreshMiscVar(9)]<br><b>setMiscVar(miscVarNumber,value)</b><br> EXAMPLE: Shot an arrow: [R: setMiscVar(8,Misc8-1)] left<br><b>getCondAC(Type)</b> // <b>setCondAC(Type,Value)</b><br>Type can be 0:Permanent, 1: till next short rest, 2: till next extended rest. Exists for (AC, Fort, Ref, Will)<br> EXAMPLE: Gain a +[R: setCondRef(1,getCondRef(1)+2)] bonus to Reflex till the end of the encounter  </pre></html> | | LABEL | SPAN=TRUE",
  "help | <html><pre><b><u>More Custom Code functions</b></u><br>[rollSkillCheck("+q+"Athletics"+q+")], [rollAbilityCheck("+q+"Strength"+q+")], [rollSavingThrow()], [swapEquipment()]<br>[spendAP()], [spendDailyItem()], [getAC()], [getFortitude()], [getReflex()], [getWill()], <br>[getCondAC(0/1/2)], [setCondAC(0/1/2,Value)], [getCondFort(0/1/2)], [setCondFort(0/1/2,Value)], <br>[getCondRef(0/1/2)], [setCondRef(0/1/2,Value)], [getCondWill(0/1/2)], [setCondWill(0/1/2,Value)]</pre></html>  | | LABEL | SPAN=TRUE",
  "help | <html>More information about: <a href=http://forums.rptools.net/viewtopic.php?p=174981#p174981>Custom Code</a> -- <a href=http://forums.rptools.net/viewtopic.php?p=174982#p174982>Custom Target</a> -- <a href=http://forums.rptools.net/viewtopic.php?p=174983#p174983>Custom Code Functions</a><br><a href=http://www.lmwcs.com/rptools/wiki/Category:Macro_Function>See this wiki for a list of MapTool functions</a></html> | | LABEL | SPAN=TRUE",
')]

[H: part7 = encode('
  "tab7 | Misc. options || TAB",
  "help | <html><b>MapTool-specific options for organizing your macro buttons.</b></html> | | LABEL | SPAN=TRUE",
  "help | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- | | LABEL | SPAN=TRUE",
  "help | <html><b>Button tooltip:</b> Turn off the tooltip if MapTool runs too slow when mousing over power macro buttons.</html> | | LABEL | SPAN=TRUE",
  "Chk_ToolTip| " + json.get(LastPower, "Chk_ToolTip") + " | Use HTML ToolTip? | CHECK",
  "help | <html><b>Button group:</b> The macro button group where this macro will appear. If the group does not already exist, it will be created.</html> | | LABEL | SPAN=TRUE",
  "Group      | " + json.get(LastPower, "Group")      + " | Button group         | TEXT | WIDTH="+S_WIDTH,
  "help | <html><b>Sort prefix:</b> This determines the alphabetical order that this macro will appear within its group.<br>The monster names are only there because they are more fun to remember than A, B, C...</html> | | LABEL | SPAN=TRUE",
  "SortPrefix | " + MACRO_BUTTON_SORT_PREFIXES  + "  | Button sort prefix | LIST | SELECT="+json.get(LastPower, "SortPrefix"),
  "help | <html><b>Min. width:</b> Setting this will stretch a button to take up a certain fraction of horizontal space, in line with other macro buttons.<br>Use this and Sort Prefix together to make your macros fit better and conserve space in the same group. (Ultra OCD control!)</html> | | LABEL | SPAN=TRUE",
  "MinWidth   | " + MACRO_BUTTON_MIN_WIDTH_NAMES + " | Button min. width | LIST | SELECT="+json.get(LastPower, "MinWidth"),
  "help | <html><b>Font size:</b> Select a font size for the button"+q+"s label.</html> | | LABEL | SPAN=TRUE",
  "FontSize   | " + MACRO_BUTTON_FONT_SIZE_NAMES + " | Button font size | LIST | SELECT="+json.get(LastPower, "FontSize"),
  "help | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- | | LABEL | SPAN=TRUE",
')]

[H: part8 = encode('
  "tab8 |Help || TAB",
  "help |<html><b>Tips for creating a power macro</b></html> | | LABEL | SPAN=TRUE",
  "help | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- | | LABEL | SPAN=TRUE",
  "help |<html>Use the checkboxes. For example, if your power doesn"+q+"t have an "+q+"Effect:"+q+" row, then uncheck Use Effect.</html>  | | LABEL | SPAN=TRUE",
  "help | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- | | LABEL | SPAN=TRUE",
  "help |<html>To make feats or class features, set Action Type to free or no-action, and set Usage Type to at-will, feature, or other.</html>  | | LABEL | SPAN=TRUE",
  "help | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- | | LABEL | SPAN=TRUE",
  "help |<html>Range comes directly after the Range Type in the resulting macro.</html>  | | LABEL | SPAN=TRUE",
  "help |<html>-- For example, if you select Area and type "+q+"blast 3"+q+" in Range, the resulting macro will read "+q+"Area blast 3."+q+"</html>  | | LABEL | SPAN=TRUE",
  "help |<html>-- For most melee attacks, type "+q+"weapon"+q+" under Range. The resulting macro will read "+q+"Melee weapon"+q+".</html>  | | LABEL | SPAN=TRUE",
  "help | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- | | LABEL | SPAN=TRUE",
  "help |<html>Some powers have targets without attack rolls, so you can still have Use Target checked even if Use Attack is unchecked.</html>  | | LABEL | SPAN=TRUE",
  "help | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- | | LABEL | SPAN=TRUE",
  "help |<html>Create a Custom Row for rows that specify class features or other notes you need.</html>  | | LABEL | SPAN=TRUE",
  "help | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- | | LABEL | SPAN=TRUE",
  "help |<html>Use Custom Code for powers and class features that lack attack rolls, such as inspiring word or hunter"+q+"s quarry.</html>  | | LABEL | SPAN=TRUE",
  "help |<html>-- It"+q+"s a good idea to specify any die rolls in a Misc variable. Do that on your character sheet.</html>  | | LABEL | SPAN=TRUE",
  "help |<html>-- Example: To make a sneak attack, set Misc1 to 2d6. Set Custom Code to "+q+"Bonus damage: {Misc1}"+q+"</html>  | | LABEL | SPAN=TRUE",
  "help | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- | | LABEL | SPAN=TRUE",
  "help |<html>Check "+q+"Is Supplemental"+q+" to specify that the power can be included with other powers.</html>  | | LABEL | SPAN=TRUE",
  "help |<html>-- For example, curse damage is added after each attack, so make curse damage into a supplemental power.</html>  | | LABEL | SPAN=TRUE",
  "help |<html>-- When you go to make an attack, select curse damage as the supplemental power. Then both macros will execute simultaneously.</html>  | | LABEL | SPAN=TRUE",
')]

[H: part9 = encode('
  "help | <html><a href=http://forums.rptools.net/viewtopic.php?p=174984#p174984>See this post for more information about Misc Variables</a></html>| | LABEL | SPAN=TRUE",
  "cond1 | Conditional Bonus 1 || TAB",
  "cond1name  | "+json.get(conditional1,"Name")+"  | Displayname | TEXT",
  "cond1affects |  Nothing, Replaces Critical Damage Bonus, Add to Attack, Add to Damagerolls, Replace Damage Dice ([W]), Change Keywords, Extra Damage (applies even to non-damagerolls), Replace Critical Die, Add to Damage Dice Count, Add Custom Row | Affects | LIST | SELECT="+json.get(conditional1,"Affects"),
  "cond1from | Keywords only , vs. Defense & Keywords, used Ability & Keywords, Attack Type & Keywords, Combat Advantage & Keywords, Attack Roll & Keywords, Target State & Keywords, My State & Keywords, No Damage Keywords & other Keywords, Expression & Keywords | Condition | LIST | SELECT="+json.get(conditional1,"From"),
  "cond1keyword | "+json.get(conditional1,"Keyword")+"  | Keyword(s) | TEXT",
  "cond1keyword2 | "+json.get(conditional1,"Keyword2")+"  | or Keyword(s) | TEXT",
  "cond1keyword3 | "+json.get(conditional1,"Keyword3")+"  | or Keyword(s) | TEXT",
  "cond1defense | "+DEFENSE_NAMES+" | Defense | LIST | SELECT="+json.get(conditional1,"Defense"),
  "cond1ability | "+ABILITY_BONUS_NAMES+" | Ability | LIST | SELECT="+json.get(conditional1,"Ability"),
  "cond1type | "+ATTACK_TYPES+" | Attack Type | LIST | SELECT="+json.get(conditional1,"Type"),
  "cond1roll | "+ATTACK_ROLLS+" | Attack Roll | LIST | SELECT="+json.get(conditional1,"Roll"),
  "cond1state | " + TOKEN_STATES + " | Token State | LIST | VALUE=STRING SELECT=" + listFind(TOKEN_STATES, translateState(json.get(conditional1, "State"))),
  "cond1expression | "+json.get(conditional1,"Expression")+"  | Expression | TEXT",
  "cond1reverse | " + json.get(conditional1,"Reverse") + " | Negate Condition? | CHECK",
  "cond1value | "+json.get(conditional1,"Value")+" | Value or Keywords to add | TEXT | WIDTH=4",
  "cond1max | "+json.get(conditional1,"Max")+" | Value (maximized) / remove KW | TEXT | WIDTH=4",
  "help | Keywords are comma seperated and must all be there for the bonus to apply. | Note | LABEL",
  "help | For example: Implement, Fire only is applied on Fire and Implement attacks. | Note | LABEL",
  "help | If the bonus should be applied to either Implement or Fire attacks, use the additional Keyword field. | Note | LABEL",
  "help | if no keywords are specified in the first field, keywords are not checked. Other empty keyword fields are ignored | Note | LABEL",
  "help | The maximized value is only used for added damage and replaced damage dice | Note | LABEL",
  "help | To Negate the condition (not the keywords) check the Negate Conditon Checkmark. | Note | LABEL",
  "help | Negated+Target state results will trigger when the target does not have that state for example | Note | LABEL",
  "help | To Negate Keywords, put a ! in front of them: Implement, !Fire is all implement attacks that do not have the Fire keyword | Note | LABEL",
  "help | Example: Some Common damage keywords the framework understands:"+DAMAGE_KEYWORDS+"| Note | LABEL",
  "cond2 | Conditional Bonus 2 || TAB",
  "cond2name  | "+json.get(conditional2,"Name")+"  | Displayname | TEXT",
  "cond2affects |  Nothing, Replaces Critical Damage Bonus, Add to Attack, Add to Damagerolls, Replace Damage Dice ([W]), Change Keywords, Extra Damage (applies even to non-damagerolls), Replace Critical Die, Add to Damage Dice Count, Add Custom Row | Affects | LIST | SELECT="+json.get(conditional2,"Affects"),
  "cond2from | Keywords only , vs. Defense & Keywords, used Ability & Keywords, Attack Type & Keywords, Combat Advantage & Keywords, Attack Roll & Keywords, Target State & Keywords, My State & Keywords, No Damage Keywords & other Keywords, Expression & Keywords | Condition | LIST | SELECT="+json.get(conditional2,"From"),
  "cond2keyword | "+json.get(conditional2,"Keyword")+"  | Keyword(s) | TEXT",
  "cond2keyword2 | "+json.get(conditional2,"Keyword2")+"  | or Keyword(s) | TEXT",
  "cond2keyword3 | "+json.get(conditional2,"Keyword3")+"  | or Keyword(s) | TEXT",
  "cond2defense | "+DEFENSE_NAMES+" | Defense | LIST | SELECT="+json.get(conditional2,"Defense"),
  "cond2ability | "+ABILITY_BONUS_NAMES+" | Ability | LIST | SELECT="+json.get(conditional2,"Ability"),
  "cond2type | "+ATTACK_TYPES+" | Attack Type | LIST | SELECT="+json.get(conditional2,"Type"),
  "cond2roll | "+ATTACK_ROLLS+" | Attack Roll | LIST | SELECT="+json.get(conditional2,"Roll"),
  "cond2state | " + TOKEN_STATES + " | Token State | LIST | VALUE=STRING SELECT=" + listFind(TOKEN_STATES, translateState(json.get(conditional2, "State"))),
  "cond2expression | "+json.get(conditional2,"Expression")+"  | Expression | TEXT",
  "cond2reverse | " + json.get(conditional2,"Reverse") + " | Negate Condition? | CHECK",
  "cond2value | "+json.get(conditional2,"Value")+" | Value or Keywords to add | TEXT | WIDTH=4",
  "cond2max | "+json.get(conditional2,"Max")+" | Value (maximized) / remove KW | TEXT | WIDTH=4",
  "cond3 | Conditional Bonus 3 || TAB",
  "cond3name  | "+json.get(conditional3,"Name")+"  | Displayname | TEXT",
  "cond3affects |  Nothing, Replaces Critical Damage Bonus, Add to Attack, Add to Damagerolls, Replace Damage Dice ([W]), Change Keywords, Extra Damage (applies even to non-damagerolls), Replace Critical Die, Add to Damage Dice Count, Add Custom Row | Affects | LIST | SELECT="+json.get(conditional3,"Affects"),
  "cond3from | Keywords only , vs. Defense & Keywords, used Ability & Keywords, Attack Type & Keywords, Combat Advantage & Keywords, Attack Roll & Keywords, Target State & Keywords, My State & Keywords, No Damage Keywords & other Keywords, Expression & Keywords | Condition | LIST | SELECT="+json.get(conditional3,"From"),
  "cond3keyword | "+json.get(conditional3,"Keyword")+"  | Keyword(s) | TEXT",
  "cond3keyword2 | "+json.get(conditional3,"Keyword2")+"  | or Keyword(s) | TEXT",
  "cond3keyword3 | "+json.get(conditional3,"Keyword3")+"  | or Keyword(s) | TEXT",
  "cond3defense | "+DEFENSE_NAMES+" | Defense | LIST | SELECT="+json.get(conditional3,"Defense"),
  "cond3ability | "+ABILITY_BONUS_NAMES+" | Ability | LIST | SELECT="+json.get(conditional3,"Ability"),
  "cond3type | "+ATTACK_TYPES+" | Attack Type | LIST | SELECT="+json.get(conditional3,"Type"),
  "cond3roll | "+ATTACK_ROLLS+" | Attack Roll | LIST | SELECT="+json.get(conditional3,"Roll"),
  "cond3state | " + TOKEN_STATES + " | Token State | LIST | VALUE=STRING SELECT=" + listFind(TOKEN_STATES, translateState(json.get(conditional3, "State"))),
  "cond3expression | "+json.get(conditional3,"Expression")+"  | Expression | TEXT",
  "cond3reverse | " + json.get(conditional3,"Reverse") + " | Negate Condition? | CHECK",
  "cond3value | "+json.get(conditional3,"Value")+" | Value or Keywords to add | TEXT | WIDTH=4",
  "cond3max | "+json.get(conditional3,"Max")+" | Value (maximized) / remove KW | TEXT | WIDTH=4",
  "cond4 | Conditional Bonus 4 || TAB",
  "cond4name  | "+json.get(conditional4,"Name")+"  | Displayname | TEXT",
  "cond4affects | Nothing, Replaces Critical Damage Bonus, Add to Attack, Add to Damagerolls, Replace Damage Dice ([W]), Change Keywords, Extra Damage (applies even to non-damagerolls), Replace Critical Die, Add to Damage Dice Count, Add Custom Row | Affects | LIST | SELECT="+json.get(conditional4,"Affects"),
  "cond4from | Keywords only , vs. Defense & Keywords, used Ability & Keywords, Attack Type & Keywords, Combat Advantage & Keywords, Attack Roll & Keywords, Target State & Keywords, My State & Keywords, No Damage Keywords & other Keywords, Expression & Keywords | Condition | LIST | SELECT="+json.get(conditional4,"From"),
  "cond4keyword | "+json.get(conditional4,"Keyword")+"  | Keyword(s) | TEXT",
  "cond4keyword2 | "+json.get(conditional4,"Keyword2")+"  | or Keyword(s) | TEXT",
  "cond4keyword3 | "+json.get(conditional4,"Keyword3")+"  | or Keyword(s) | TEXT",
  "cond4defense | "+DEFENSE_NAMES+" | Defense | LIST | SELECT="+json.get(conditional4,"Defense"),
  "cond4ability | "+ABILITY_BONUS_NAMES+" | Ability | LIST | SELECT="+json.get(conditional4,"Ability"),
  "cond4type | "+ATTACK_TYPES+" | Attack Type | LIST | SELECT="+json.get(conditional4,"Type"),
  "cond4roll | "+ATTACK_ROLLS+" | Attack Roll | LIST | SELECT="+json.get(conditional4,"Roll"),
  "cond4state | " + TOKEN_STATES + " | Token State | LIST | VALUE=STRING SELECT=" + listFind(TOKEN_STATES, translateState(json.get(conditional4, "State"))),
  "cond4expression | "+json.get(conditional4,"Expression")+"  | Expression | TEXT",
  "cond4reverse | " + json.get(conditional4,"Reverse") + " | Negate Condition? | CHECK",
  "cond4value | "+json.get(conditional4,"Value")+" | Value or Keywords to add | TEXT | WIDTH=4",
  "cond4max | "+json.get(conditional4,"Max")+" | Value (maximized) / remove KW | TEXT | WIDTH=4",
  "cond5 | Conditional Bonus 5 || TAB",
  "cond5name  | "+json.get(conditional5,"Name")+"  | Displayname | TEXT",
  "cond5affects |  Nothing, Replaces Critical Damage Bonus, Add to Attack, Add to Damagerolls, Replace Damage Dice ([W]), Change Keywords, Extra Damage (applies even to non-damagerolls), Replace Critical Die, Add to Damage Dice Count, Add Custom Row | Affects | LIST | SELECT="+json.get(conditional5,"Affects"),
  "cond5from | Keywords only , vs. Defense & Keywords, used Ability & Keywords, Attack Type & Keywords, Combat Advantage & Keywords, Attack Roll & Keywords, Target State & Keywords, My State & Keywords, No Damage Keywords & other Keywords, Expression & Keywords | Condition | LIST | SELECT="+json.get(conditional5,"From"),
  "cond5keyword | "+json.get(conditional5,"Keyword")+"  | Keyword(s) | TEXT",
  "cond5keyword2 | "+json.get(conditional5,"Keyword2")+"  | or Keyword(s) | TEXT",
  "cond5keyword3 | "+json.get(conditional5,"Keyword3")+"  | or Keyword(s) | TEXT",
  "cond5defense | "+DEFENSE_NAMES+" | Defense | LIST | SELECT="+json.get(conditional5,"Defense"),
  "cond5ability | "+ABILITY_BONUS_NAMES+" | Ability | LIST | SELECT="+json.get(conditional5,"Ability"),
  "cond5type | "+ATTACK_TYPES+" | Attack Type | LIST | SELECT="+json.get(conditional5,"Type"),
  "cond5roll | "+ATTACK_ROLLS+" | Attack Roll | LIST | SELECT="+json.get(conditional5,"Roll"),
   "cond5state | " + TOKEN_STATES + " | Token State | LIST | VALUE=STRING SELECT=" + listFind(TOKEN_STATES, translateState(json.get(conditional5, "State"))),
  "cond5expression | "+json.get(conditional5,"Expression")+"  | Expression | TEXT",
  "cond5reverse | " + json.get(conditional5,"Reverse") + " | Negate Condition? | CHECK",
  "cond5value | "+json.get(conditional5,"Value")+" | Value or Keywords to add | TEXT | WIDTH=4",
  "cond5max | "+json.get(conditional5,"Max")+" | Value (maximized) / remove KW | TEXT | WIDTH=4"
)
')]
[H: macro.return = decode(part0)+decode(part1)+decode(part2)+decode(part3)+decode(part4)+decode(part5)+decode(part6)+decode(part7)+decode(part8)+decode(part9)]

